{"version":3,"sources":["App.jsx","actions/index.js","const.js","registerServiceWorker.js","reducers/index.js","index.js"],"names":["App","props","state","text","dueDate","console","log","this","addReminder","id","deleteReminder","reminders","map","reminder","key","moment","Date","fromNow","onClick","className","placeholder","onChange","event","setState","target","value","type","addRemider","renderReminders","clearReminders","Component","connect","action","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","Math","random","removeById","filter","read_cookie","bake_cookie","store","createStore","reducer","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3a6e37e2.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport { addReminder, deleteReminder, clearReminders } from './actions';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: '',\n            dueDate: '',\n        };\n    }\n\n    addRemider() {\n        console.log('this.state.dueDate', this.state.dueDate);\n        this.props.addReminder(this.state.text, this.state.dueDate);\n    }\n\n    deleteReminder(id) {\n        this.props.deleteReminder(id);\n    }\n\n    renderReminders() {\n        const { reminders } = this.props;\n        return (\n            <ul>\n                {\n                    reminders.map(reminder => {\n                        return (\n                            <li key={reminder.id}>\n                                <div>\n                                    <div>{reminder.text}</div>\n                                    <div><em>{moment(new Date(reminder.dueDate)).fromNow()}</em></div>\n                                </div>\n                                <div\n                                    onClick={() => this.deleteReminder(reminder.id)}\n                                >\n                                    &#x2715;\n                                </div>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        );\n    }\n\n    render() {\n        console.log('this.props', this.props);\n        return (\n            <div className=\"App\">\n                <h1>React Redux App</h1>\n                <form>\n                    <input\n                        placeholder=\"Enter text\"\n                        onChange={event => this.setState({ text: event.target.value })}\n                    />\n                    <input\n                        type=\"datetime-local\"\n                        onChange={event => this.setState({dueDate: event.target.value})}\n                    />\n                    <button\n                        type=\"button\"\n                        onClick={() => this.addRemider()}\n                    >\n                        Button\n                    </button>\n                </form>\n                {this.renderReminders()}\n                <div\n                    onClick={() => this.props.clearReminders()}\n                >\n                    Clear Reminders\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        reminders: state\n    }\n}\n\nexport default connect(mapStateToProps, { addReminder, deleteReminder, clearReminders })(App);\n","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../const';\n\nexport const addReminder = (text, dueDate) => {\n    const action = {\n        type: ADD_REMINDER,\n        text,\n        dueDate,\n    }\n    console.log('action in addReminder', action);\n    return action;\n}\n\nexport const deleteReminder = (id) => {\n    const action = {\n        type: DELETE_REMINDER,\n        id,\n    }\n    console.log('delete in action', action);\n    return action;\n}\n\nexport const clearReminders = () => {\n    const action = {\n        type: CLEAR_REMINDERS,\n    }\n    return action;\n}"," export const ADD_REMINDER = 'ADD_REMINDER';\n export const DELETE_REMINDER = 'DELETE_REMINDER';\n export const CLEAR_REMINDERS = 'CLEAR_REMINDERS';","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../const';\nimport { bake_cookie, read_cookie } from 'sfcookies'\n\nconst reminder = (action) => {\n    let { text, dueDate } = action;\n    return {\n        id: Math.random(),\n        text,\n        dueDate,\n    }\n}\n\nconst removeById = (state = [], id) => {\n    const reminders = state.filter(reminder => reminder.id !== id);\n    console.log('new reducer reminders', reminders);\n    return reminders\n}\n\nconst reminders = (state = [], action) => {\n    let reminders = null;\n    state = read_cookie('reminders');\n    switch(action.type) {\n        case ADD_REMINDER:\n            reminders = [...state, reminder(action)];\n            bake_cookie('reminders', reminders);\n            return reminders;\n        case DELETE_REMINDER:\n            reminders = removeById(state, action.id);\n            bake_cookie('reminders', reminders);\n            return reminders;\n        case CLEAR_REMINDERS:\n            reminders = [];\n            bake_cookie('reminders', reminders);\n            return reminders;\n        default:\n            return state;\n    }\n}\n\nexport default reminders;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}